
FROM quay.io/pypa/manylinux1_x86_64

RUN yum install -y gtest-devel

ENV PATH="/opt/python/cp27-cp27mu/bin:${PATH}"

####################################
# These dependencies can be found in Ubuntu but they're not compiled with -fPIC,
# so they cannot be statically linked into a shared library
####################################

# ZLib
RUN curl -O -L https://zlib.net/zlib-1.2.11.tar.gz && \
    tar xvfz zlib-1.2.11.tar.gz && \
    cd zlib-1.2.11 && \
    CFLAGS="-fPIC -O3" ./configure && \
    make && make install && \
    rm -rf /zlib-1.2.11.tar.gz /zlib-1.2.11

# Compile OpenSSL
RUN curl -O -L https://github.com/openssl/openssl/archive/OpenSSL_1_0_2l.tar.gz && \
    tar xvfz OpenSSL_1_0_2l.tar.gz && \
    cd openssl-OpenSSL_1_0_2l/ && \
    ./Configure -fPIC no-shared linux-x86_64 && \
    make && make install && \
    rm -rf /OpenSSL_1_0_2l.tar.gz /openssl-OpenSSL_1_0_2l

# Download and compile boost
RUN curl -O -L https://dl.bintray.com/boostorg/release/1.64.0/source/boost_1_64_0.tar.gz && \
    tar xvfz boost_1_64_0.tar.gz && \
    cd /boost_1_64_0 && \
    ./bootstrap.sh --with-libraries=program_options,filesystem,regex,thread,system,python && \
    ./b2 address-model=64 cxxflags=-fPIC link=static threading=multi variant=release install && \
    rm -rf /boost_1_64_0.tar.gz /boost_1_64_0

# Download and copile protoubf
RUN curl -O -L  https://github.com/google/protobuf/releases/download/v3.3.0/protobuf-cpp-3.3.0.tar.gz && \
    tar xvfz protobuf-cpp-3.3.0.tar.gz && \
    cd protobuf-3.3.0/ && \
    CXXFLAGS=-fPIC ./configure && \
    make && make install && ldconfig && \
    rm -rf /protobuf-cpp-3.3.0.tar.gz /protobuf-3.3.0

# Compile APR
RUN curl -O -L  http://mirror.stjschools.org/public/apache//apr/apr-1.5.2.tar.gz && \
    tar xvfz apr-1.5.2.tar.gz && \
    cd apr-1.5.2 && \
    CFLAGS=-fPIC CXXFLAGS=-fPIC ./configure && \
    make && make install && \
    rm -rf /apr-1.5.2.tar.gz /apr-1.5.2

# Compile APR-Util
RUN curl -O -L  http://mirror.stjschools.org/public/apache//apr/apr-util-1.5.4.tar.gz && \
    tar xvfz apr-util-1.5.4.tar.gz && \
    cd apr-util-1.5.4 && \
    CFLAGS=-fPIC CXXFLAGS=-fPIC ./configure -with-apr=/usr/local/apr && \
    make && make install && \
    rm -rf /apr-util-1.5.4.tar.gz /apr-util-1.5.4

# Libtool
RUN curl -L -O https://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.gz && \
    tar xvfz libtool-2.4.6.tar.gz && \
    cd libtool-2.4.6 && \
    ./configure && \
    make && make install && \
    rm -rf /libtool-2.4.6.tar.gz /libtool-2.4.6

# Compile log4cxx
RUN git clone https://github.com/apache/logging-log4cxx.git && \
    cd logging-log4cxx && \
    ./autogen.sh && \
    CXXFLAGS=-fPIC ./configure && \
    make && make install && \
    rm -rf /logging-log4cxx

# Compile expat
RUN curl -O -L  https://github.com/libexpat/libexpat/archive/R_2_2_0.tar.gz && \
    tar xfvz R_2_2_0.tar.gz && \
    cd libexpat-R_2_2_0/expat && \
    ./buildconf.sh && \
    CFLAGS=-fPIC CXXFLAGS=-fPIC ./configure  && \
    make && make installlib && \
    rm -rf /R_2_2_0.tar.gz /libexpat-R_2_2_0

# Compile Cmake
RUN curl -O -L https://cmake.org/files/v3.8/cmake-3.8.2.tar.gz && \
    tar xvfz cmake-3.8.2.tar.gz && \
    cd cmake-3.8.2 && \
    ./configure && \
    make && make install && \
    rm -rf /cmake-3.8.2.tar.gz /cmake-3.8.2

# Compile JSON CPP
RUN curl -O -L  https://github.com/open-source-parsers/jsoncpp/archive/1.8.0.tar.gz && \
    tar xvfz 1.8.0.tar.gz && \
    cd jsoncpp-1.8.0 && \
    cmake . -DCMAKE_POSITION_INDEPENDENT_CODE=ON && \
    make && make install && \
    rm -rf /1.8.0.tar.gz /jsoncpp-1.8.0


# LibCurl
RUN curl -O -L  https://github.com/curl/curl/releases/download/curl-7_54_0/curl-7.54.0.tar.gz && \
    tar xvfz curl-7.54.0.tar.gz && \
    cd curl-7.54.0 && \
    CFLAGS=-fPIC ./configure && \
    make && make install && \
    rm -rf /curl-7.54.0.tar.gz /curl-7.54.0

RUN pip install twine


ENV PYTHON_INCLUDE_DIR /opt/python/cp27-cp27mu/include
ENV PYTHON_LIBRARIES   /opt/python/cp27-cp27mu/lib/python2.7
ENV OPENSSL_ROOT_DIR   /usr/local/ssl/


COPY build.sh /
